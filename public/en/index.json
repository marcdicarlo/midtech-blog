[{"categories":["DevOps"],"contents":" Improving DNS Reliability with NodeLocalDNS in Kubernetes Occasionally in local Kubernetes clusters (specifically on Ubuntu 24.04), I noticed intermittent DNS resolution failures‚Äîpods would fail to resolve names even though the host itself could do so just fine.\nThe fix? Adding NodeLocalDNS as a caching DNS layer on each node. This setup reduces reliance on external DNS lookups by caching frequently queried results locally. It‚Äôs especially useful in lab environments, homelabs, or clusters where DNS latency or flakiness causes issues with microservice resolution.\nThis post walks through deploying NodeLocalDNS as a DaemonSet using an official manifest template and customizing it with your cluster‚Äôs values.\nSymptoms Sporadic DNS failures inside pods Host-level resolution works, but nslookup or app service discovery fails inside Kubernetes Resolved by restarting CoreDNS but reappears randomly Step 1: Save the NodeLocalDNS Manifest Save the following manifest template as nodelocaldns.yaml. This includes the ServiceAccount, ConfigMap, DaemonSet, and the headless service for Prometheus metrics.\nüõë Note: The manifest contains placeholder variables (__PILLAR__LOCAL__DNS__, etc.) which you‚Äôll replace in the next steps.\nClick to view full NodeLocalDNS manifest # Copyright 2018 The Kubernetes Authors. # # Licensed under the Apache License, Version 2.0 (the \u0026#34;License\u0026#34;); # you may not use this file except in compliance with the License. # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an \u0026#34;AS IS\u0026#34; BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. # See the License for the specific language governing permissions and # limitations under the License. # apiVersion: v1 kind: ServiceAccount metadata: name: node-local-dns namespace: kube-system labels: kubernetes.io/cluster-service: \u0026#34;true\u0026#34; addonmanager.kubernetes.io/mode: Reconcile --- apiVersion: v1 kind: Service metadata: name: kube-dns-upstream namespace: kube-system labels: k8s-app: kube-dns kubernetes.io/cluster-service: \u0026#34;true\u0026#34; addonmanager.kubernetes.io/mode: Reconcile kubernetes.io/name: \u0026#34;KubeDNSUpstream\u0026#34; spec: ports: - name: dns port: 53 protocol: UDP targetPort: 53 - name: dns-tcp port: 53 protocol: TCP targetPort: 53 selector: k8s-app: kube-dns --- apiVersion: v1 kind: ConfigMap metadata: name: node-local-dns namespace: kube-system labels: addonmanager.kubernetes.io/mode: Reconcile data: Corefile: | __PILLAR__DNS__DOMAIN__:53 { errors cache { success 9984 30 denial 9984 5 } reload loop bind __PILLAR__LOCAL__DNS__ __PILLAR__DNS__SERVER__ forward . __PILLAR__CLUSTER__DNS__ { force_tcp } prometheus :9253 health __PILLAR__LOCAL__DNS__:8080 } in-addr.arpa:53 { errors cache 30 reload loop bind __PILLAR__LOCAL__DNS__ __PILLAR__DNS__SERVER__ forward . __PILLAR__CLUSTER__DNS__ { force_tcp } prometheus :9253 } ip6.arpa:53 { errors cache 30 reload loop bind __PILLAR__LOCAL__DNS__ __PILLAR__DNS__SERVER__ forward . __PILLAR__CLUSTER__DNS__ { force_tcp } prometheus :9253 } .:53 { errors cache 30 reload loop bind __PILLAR__LOCAL__DNS__ __PILLAR__DNS__SERVER__ forward . __PILLAR__UPSTREAM__SERVERS__ prometheus :9253 } --- apiVersion: apps/v1 kind: DaemonSet metadata: name: node-local-dns namespace: kube-system labels: k8s-app: node-local-dns kubernetes.io/cluster-service: \u0026#34;true\u0026#34; addonmanager.kubernetes.io/mode: Reconcile spec: updateStrategy: rollingUpdate: maxUnavailable: 10% selector: matchLabels: k8s-app: node-local-dns template: metadata: labels: k8s-app: node-local-dns annotations: prometheus.io/port: \u0026#34;9253\u0026#34; prometheus.io/scrape: \u0026#34;true\u0026#34; spec: priorityClassName: system-node-critical serviceAccountName: node-local-dns hostNetwork: true dnsPolicy: Default # Don\u0026#39;t use cluster DNS. tolerations: - key: \u0026#34;CriticalAddonsOnly\u0026#34; operator: \u0026#34;Exists\u0026#34; - effect: \u0026#34;NoExecute\u0026#34; operator: \u0026#34;Exists\u0026#34; - effect: \u0026#34;NoSchedule\u0026#34; operator: \u0026#34;Exists\u0026#34; containers: - name: node-cache image: registry.k8s.io/dns/k8s-dns-node-cache:1.25.0 resources: requests: cpu: 25m memory: 5Mi args: [ \u0026#34;-localip\u0026#34;, \u0026#34;__PILLAR__LOCAL__DNS__,__PILLAR__DNS__SERVER__\u0026#34;, \u0026#34;-conf\u0026#34;, \u0026#34;/etc/Corefile\u0026#34;, \u0026#34;-upstreamsvc\u0026#34;, \u0026#34;kube-dns-upstream\u0026#34; ] securityContext: capabilities: add: - NET_ADMIN ports: - containerPort: 53 name: dns protocol: UDP - containerPort: 53 name: dns-tcp protocol: TCP - containerPort: 9253 name: metrics protocol: TCP livenessProbe: httpGet: host: __PILLAR__LOCAL__DNS__ path: /health port: 8080 initialDelaySeconds: 60 timeoutSeconds: 5 volumeMounts: - mountPath: /run/xtables.lock name: xtables-lock readOnly: false - name: config-volume mountPath: /etc/coredns - name: kube-dns-config mountPath: /etc/kube-dns volumes: - name: xtables-lock hostPath: path: /run/xtables.lock type: FileOrCreate - name: kube-dns-config configMap: name: kube-dns optional: true - name: config-volume configMap: name: node-local-dns items: - key: Corefile path: Corefile.base --- # A headless service is a service with a service IP but instead of load-balancing it will return the IPs of our associated Pods. # We use this to expose metrics to Prometheus. apiVersion: v1 kind: Service metadata: annotations: prometheus.io/port: \u0026#34;9253\u0026#34; prometheus.io/scrape: \u0026#34;true\u0026#34; labels: k8s-app: node-local-dns name: node-local-dns namespace: kube-system spec: clusterIP: None ports: - name: metrics port: 9253 targetPort: 9253 selector: k8s-app: node-local-dns Step 2: Set Your Variables Populate required values using the commands below. Replace placeholder domains and addresses with ones that match your environment.\nkubedns=$(kubectl get svc kube-dns -n kube-system -o jsonpath={.spec.clusterIP}) domain=\u0026lt;cluster-domain\u0026gt; # usually \u0026#39;cluster.local\u0026#39; localdns=\u0026lt;node-local-address\u0026gt; # e.g. 169.254.20.10 upstreamdns=\u0026#34;\u0026lt;dns-ip-1\u0026gt; \u0026lt;dns-ip-2\u0026gt;\u0026#34; # replace with valid reachable upstream DNS servers If upstream DNS servers aren‚Äôt available from the pod network, consider using the host loopback address:\nupstreamdns=\u0026#34;127.0.0.1:53\u0026#34; Step 3: Replace Placeholders in the Manifest Run the following commands to replace template variables in the manifest:\nsed -i \u0026#34;s/__PILLAR__LOCAL__DNS__/$localdns/g; \\ s/__PILLAR__DNS__DOMAIN__/$domain/g; \\ s/__PILLAR__DNS__SERVER__/$kubedns/g\u0026#34; nodelocaldns.yaml sed -i \u0026#34;s/__PILLAR__UPSTREAM__SERVERS__/$upstreamdns/g\u0026#34; nodelocaldns.yaml Double-check that no __PILLAR__ placeholders remain in the file.\nStep 4: Apply the Manifest Deploy NodeLocalDNS:\nkubectl create -f nodelocaldns.yaml Step 5: Restart CoreDNS Force CoreDNS pods to restart so they can detect the NodeLocalDNS layer:\nkubectl delete pods -n kube-system -l k8s-app=kube-dns Step 6: Test DNS Resolution Run a simple BusyBox pod and test DNS queries:\nkubectl run -i --tty busybox --image=busybox --restart=Never -- sh Inside the pod:\nnslookup google.com You should see a quick response without resolution failures.\nReferences üìò NodeLocalDNS Kubernetes Docs üîß CoreDNS Forward Plugin Let me know if you\u0026rsquo;d like a follow-up post on integrating this into GitOps workflow using FluxCD.\n","permalink":"http://localhost:1313/en/posts/nodelocaldns/","tags":["kubernetes","dns","nodelocaldns","coredns","devops","ubuntu","networking"],"title":"Improving DNS Reliability with NodeLocalDNS in Kubernetes"},{"categories":["Development"],"contents":"Welcome to part 2 of the blog setup series. In this one, I\u0026rsquo;m replacing some stock assets and making a few small visual tweaks to the navigation bar.\nüñºÔ∏è Replacing Stock Icons ‚úÖ Custom Logo Copy your custom logo to the /static/images directory.\nüåê Favicon Drop your custom favicon at the top level of the /static directory. Hugo will serve it from the root when the site builds.\nüß™ Tweak the Nav Logo Outline This one‚Äôs just a minor nitpick‚ÄîI wanted to reduce the thick white outline around the logo in the nav bar. If you\u0026rsquo;re using the Niello theme, head to:\nthemes/Niello/layout/partials/nav.html Find this snippet:\n\u0026lt;img src=\u0026#34;/image/logo.webp?v={{ now.Unix }}\u0026#34; alt=\u0026#34;Logo\u0026#34; class=\u0026#34;w-16 h-16 my-5 p-1 bg-gray-100 rounded-full object-cover cursor-pointer hover:scale-110\u0026#34; /\u0026gt; And change the padding slightly:\n\u0026lt;img src=\u0026#34;/image/logo.webp?v={{ now.Unix }}\u0026#34; alt=\u0026#34;Logo\u0026#34; class=\u0026#34;w-16 h-16 my-5 p-.8 bg-gray-100 rounded-full object-cover cursor-pointer hover:scale-110\u0026#34; /\u0026gt; Tiny tweak, but it made a visual difference I liked.\nüìÇ Other Stock Images In the /static/images folder, you\u0026rsquo;ll find a few more stock assets you can replace:\ncommon-404.webp common-writing-empty.webp Once I come up with better versions of these, I‚Äôll drop them into the same directory and they‚Äôll overwrite the theme defaults automatically.\n","permalink":"http://localhost:1313/en/posts/blog-setup-2/","tags":["hugo","blog setup","static site","niello theme","customization","web dev"],"title":"Setting up this Blog! - Part 2"},{"categories":["Cooking"],"contents":"No-nonsense hoagie roll recipe based on this one from Ethan Chlebowski. Adjusted for Colorado mountain altitude and dryness‚Äîbecause baking up here is a whole different game. I basically doubled the oil content to fight off the dry air.\nPlanning to try this with shortening instead of oil next time, just to see how it holds up. üß™\nIngredients milk: 260g yeast: 8g diastatic malt powder: 8g flour: 400g honey: 10g sugar: 5g olive oil: 40g salt: 8g Prep üßÇ Mix and knead until smooth and elastic. Divide the dough into 4 equal parts. Roll each piece flat, then shape into tight tubes (like little baguettes). Let rise until puffy and ready to bake. Bake Bake at 375¬∞F for 20 minutes. Rotate halfway through. Egg wash optional (for shine). Steam optional (for crust). These come out soft with just enough chew‚Äîperfect for meatball subs or Philly cheesesteaks. üëå\n","permalink":"http://localhost:1313/en/posts/hoagie/","tags":["baking","bread","hoagie rolls","recipes","home cooking"],"title":"Hoagie Roll Recipe ü•ñ"},{"categories":["Development","DevOps"],"contents":"First Post! üéâ Automating Blog Deployment with Hugo Hey everyone‚Äîwelcome to my brand-new blog! I\u0026rsquo;m super excited to kick things off by sharing how I set up and automated the deployment process of this very website you\u0026rsquo;re visiting right now. After some research, I decided on Hugo, a fantastic static site generator that\u0026rsquo;s incredibly quick, straightforward to use, and ideal for blogs and simpler websites. Let\u0026rsquo;s dive in!\nWhy Hugo? ü§î Before we get technical, you might wonder: Why did I pick Hugo among all the options out there? Well, a few things caught my eye:\nüöÄ Blazing Fast: Hugo generates static sites almost instantly, even if your site grows to hundreds or thousands of posts. No more waiting around for slow builds!\nüéØ Easy to Use: Even if you‚Äôre not deeply familiar with web development, Hugo is beginner-friendly. Content is written in Markdown, and setting everything up is a breeze.\nüé® Highly Customizable: Hugo has tons of beautiful themes, plugins, and community support‚Äîletting you easily personalize your blog\u0026rsquo;s look and feel without any headaches.\nStep 1: Installing Hugo üíª I won‚Äôt repeat every installation step here, as Hugo‚Äôs documentation already covers that wonderfully. To get set up quickly, check out their official instructions:\nüëâ Official Hugo Installation Guide\nFor reference, here‚Äôs my current Hugo version:\nhugo v0.145.0-666444f0a52132f9fec9f71cf25b441cc6a4f355 linux/amd64 BuildDate=2025-02-26T15:41:25Z VendorInfo=gohugoio Always check you\u0026rsquo;re using the same (or newer) version to follow along smoothly.\nStep 2: Setting Up Your Hugo Project üìÇ Once Hugo\u0026rsquo;s installed, let\u0026rsquo;s start creating our actual blog project. Here‚Äôs exactly how I did mine:\nhugo new site quickstart cd quickstart git init git submodule add https://github.com/guangmean/Niello.git themes/Niello echo \u0026#34;theme = \u0026#39;Niello\u0026#39;\u0026#34; \u0026gt;\u0026gt; hugo.toml hugo server Let\u0026rsquo;s quickly break down what\u0026rsquo;s happening here:\nNew Hugo site: quickstart is my chosen project name, feel free to pick whatever suits your project best. Git Initialization: I use Git for version control, helping me track changes easily and safely roll back if needed. Theme Setup: I went with the minimalist Niello theme‚Äîit\u0026rsquo;s sleek, clean, and keeps readers focused on content. Configuration: Adding the theme\u0026rsquo;s name to hugo.toml tells Hugo which theme to use. Local Preview: Running hugo server gives you instant live preview updates as you write, edit, and tweak your site‚Äîextremely helpful! configure the theme save the following to the hugo.toml file adjusting as needed.\nbaseURL = \u0026#34;https://www.angularcorp.com/\u0026#34; # Must end with splash defaultContentLanguage = \u0026#34;en\u0026#34; defaultContentLanguageInSubdir = true staticDir = [\u0026#34;themes/Niello/static\u0026#34;, \u0026#34;static\u0026#34;] theme = \u0026#34;Niello\u0026#34; [languages] [languages.en] title = \u0026#34;{CodeTrace} - Discover Issues, Share Solutions.\u0026#34; languageCode = \u0026#34;en-us\u0026#34; LanguageName = \u0026#34;üá∫üá∏EN\u0026#34; contentDir = \u0026#34;content/en\u0026#34; weight = 1 [[languages.en.menus.main]] name = \u0026#39;Home\u0026#39; pageRef = \u0026#39;/\u0026#39; weight = 1 [[languages.en.menus.main]] name = \u0026#39;Categories\u0026#39; pageRef = \u0026#39;/categories\u0026#39; weight = 2 [[languages.en.menus.main]] name = \u0026#39;Tags\u0026#39; pageRef = \u0026#39;/tags\u0026#39; weight = 3 [[languages.en.menus.main]] name = \u0026#39;Contact\u0026#39; pageRef = \u0026#39;/contact\u0026#39; weight = 4 [languages.zh] title = \u0026#34;{Á†ÅÈÄîËΩ®Ëøπ} - ÂèëÁé∞ÈóÆÈ¢òÔºåÂàÜ‰∫´Ëß£ÂÜ≥.\u0026#34; languageCode = \u0026#34;zh-cn\u0026#34; LanguageName = \u0026#34;üá®üá≥CN\u0026#34; contentDir = \u0026#34;content/zh\u0026#34; weight = 2 [[languages.zh.menus.main]] name = \u0026#39;È¶ñÈ°µ\u0026#39; pageRef = \u0026#39;/\u0026#39; weight = 1 [[languages.zh.menus.main]] name = \u0026#39;ÊñáÁ´†ÂàÜÁ±ª\u0026#39; pageRef = \u0026#39;/categories\u0026#39; weight = 2 [[languages.zh.menus.main]] name = \u0026#39;Ê†áÁ≠æ\u0026#39; pageRef = \u0026#39;/tags\u0026#39; weight = 3 [[languages.zh.menus.main]] name = \u0026#39;ËÅîÁ≥ªÊàë‰ª¨\u0026#39; pageRef = \u0026#39;/contact\u0026#39; weight = 4 [params] [params.google] google_ad_client = \u0026#34;ca-pub-******\u0026#34; //Optional, replace ca-pub-****** with your content ga4 = \u0026#34;G-******\u0026#34; //Optional, replace G-****** with your Google Analytics GA4 [params.bannershowcase] categories = [\u0026#34;AI\u0026#34;] limit = 2 [params.email] contact = \u0026#34;angularcorp@outlook.com\u0026#34; [params.ignore] categories = [\u0026#34;privacy\u0026#34;, \u0026#34;terms\u0026#34;, \u0026#34;archives\u0026#34;, \u0026#34;cookie\u0026#34;] [params.license] copyright = \u0026#34;\u0026amp;#xA9; 2019 ~ 2025 by guangmean. All Rights Reserved.\u0026#34; [params.share] sharethis = \u0026#34;******\u0026#34; // Optional, Add hou ShareThis appid here [params.disqus] shortname = \u0026#34;******\u0026#34;\t// Optional, Disqus Comment Short Name [outputs] home = [\u0026#34;HTML\u0026#34;, \u0026#34;JSON\u0026#34;] In order to change some translation key such as site title, slogan, etc you must create the following directory at the top level your project: i18n.\ncreate an appropiate language file (e.g en.toml for english) # File path: i18n/en.toml [sitename] other = \u0026#34;Site Name\u0026#34; [siteslogan] other = \u0026#34;Site Slogan\u0026#34; [siteseokeywords] other = \u0026#34;Site Home SEO Keywords\u0026#34; [siteseodescription] other = \u0026#34;Site Home SEO Description\u0026#34; Step 3: Creating Your First Post üìù Now, the fun part‚Äîyour first post! Hugo makes adding new content effortless. Just run:\nhugo new content posts/my-first-post.md This creates a fresh Markdown file (my-first-post.md). Markdown is super intuitive and easy-to-read. Just open the file, start writing, and save‚ÄîHugo handles everything else. Trust me; you\u0026rsquo;ll love how straightforward it feels.\nWhy the Niello Theme? üé®‚ú® I specifically picked Niello because of its clean, minimalist design. The layout puts the spotlight firmly on your content without distractions. Plus, it\u0026rsquo;s fully responsive‚Äîyour posts look fantastic on desktops, tablets, and mobile phones alike.\nAutomating the Deployment Process ‚öôÔ∏èüîÑ This blog is deployed using the default github actions for hugo static sites. Under settings/pages enable github actions under the build and deploy section:\n# Sample workflow for building and deploying a Hugo site to GitHub Pages name: Deploy Hugo site to Pages on: # Runs on pushes targeting the default branch push: branches: [\u0026#34;main\u0026#34;] # Allows you to run this workflow manually from the Actions tab workflow_dispatch: # Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages permissions: contents: read pages: write id-token: write # Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued. # However, do NOT cancel in-progress runs as we want to allow these production deployments to complete. concurrency: group: \u0026#34;pages\u0026#34; cancel-in-progress: false # Default to bash defaults: run: shell: bash jobs: # Build job build: runs-on: ubuntu-latest env: HUGO_VERSION: 0.128.0 steps: - name: Install Hugo CLI run: | wget -O ${{ runner.temp }}/hugo.deb https://github.com/gohugoio/hugo/releases/download/v${HUGO_VERSION}/hugo_extended_${HUGO_VERSION}_linux-amd64.deb \\ \u0026amp;\u0026amp; sudo dpkg -i ${{ runner.temp }}/hugo.deb - name: Install Dart Sass run: sudo snap install dart-sass - name: Checkout uses: actions/checkout@v4 with: submodules: recursive - name: Setup Pages id: pages uses: actions/configure-pages@v5 - name: Install Node.js dependencies run: \u0026#34;[[ -f package-lock.json || -f npm-shrinkwrap.json ]] \u0026amp;\u0026amp; npm ci || true\u0026#34; - name: Build with Hugo env: HUGO_CACHEDIR: ${{ runner.temp }}/hugo_cache HUGO_ENVIRONMENT: production run: | hugo \\ --minify \\ --baseURL \u0026#34;${{ steps.pages.outputs.base_url }}/\u0026#34; - name: Upload artifact uses: actions/upload-pages-artifact@v3 with: path: ./public # Deployment job deploy: environment: name: github-pages url: ${{ steps.deployment.outputs.page_url }} runs-on: ubuntu-latest needs: build steps: - name: Deploy to GitHub Pages id: deployment uses: actions/deploy-pages@v4 Search To enable the search functionality, you need to configure JSON output in the hugo.toml file by adding the following:\n[outputs] home = [\u0026#34;HTML\u0026#34;, \u0026#34;JSON\u0026#34;] And a search folder with an _index.md file under the content directory is required, for example: content/en/search/_index.md\n+++ title = \u0026#34;Search Results\u0026#34; date = 2024-12-13T15:00:00+08:00 draft = false layout = \u0026#34;search\u0026#34; +++ With this setup, the search URL will be /en/search/?q=keywords\n","permalink":"http://localhost:1313/en/posts/blog-setup/","tags":["hugo","linux","ci/cd","programming","devops","pipeline","automation","blog","markdown"],"title":"Setting up this Blog! - Part 1"}]
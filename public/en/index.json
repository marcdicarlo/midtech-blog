[{"categories":null,"contents":"No-nonsense hoagie roll recipe based on this one from Ethan Chlebowski. Adjusted for Colorado mountain altitude and dryness—because baking up here is a whole different game. I basically doubled the oil content to fight off the dry air.\nPlanning to try this with shortening instead of oil next time, just to see how it holds up. 🧪\nIngredients milk: 260g yeast: 8g diastatic malt powder: 8g flour: 400g honey: 10g sugar: 5g olive oil: 40g salt: 8g Prep 🧂 Mix and knead until smooth and elastic. Divide the dough into 4 equal parts. Roll each piece flat, then shape into tight tubes (like little baguettes). Let rise until puffy and ready to bake. Bake Bake at 375°F for 20 minutes. Rotate halfway through. Egg wash optional (for shine). Steam optional (for crust). These come out soft with just enough chew—perfect for meatball subs or Philly cheesesteaks. 👌\n","permalink":"http://localhost:1313/en/posts/hoagie/","tags":["baking","bread","hoagie rolls","recipes","home cooking"],"title":"Hoagie Roll Recipe 🥖"},{"categories":["Development","DevOps"],"contents":"First Post! 🎉 Automating Blog Deployment with Hugo Hey everyone—welcome to my brand-new blog! I\u0026rsquo;m super excited to kick things off by sharing how I set up and automated the deployment process of this very website you\u0026rsquo;re visiting right now. After some research, I decided on Hugo, a fantastic static site generator that\u0026rsquo;s incredibly quick, straightforward to use, and ideal for blogs and simpler websites. Let\u0026rsquo;s dive in!\nWhy Hugo? 🤔 Before we get technical, you might wonder: Why did I pick Hugo among all the options out there? Well, a few things caught my eye:\n🚀 Blazing Fast: Hugo generates static sites almost instantly, even if your site grows to hundreds or thousands of posts. No more waiting around for slow builds!\n🎯 Easy to Use: Even if you’re not deeply familiar with web development, Hugo is beginner-friendly. Content is written in Markdown, and setting everything up is a breeze.\n🎨 Highly Customizable: Hugo has tons of beautiful themes, plugins, and community support—letting you easily personalize your blog\u0026rsquo;s look and feel without any headaches.\nStep 1: Installing Hugo 💻 I won’t repeat every installation step here, as Hugo’s documentation already covers that wonderfully. To get set up quickly, check out their official instructions:\n👉 Official Hugo Installation Guide\nFor reference, here’s my current Hugo version:\nhugo v0.145.0-666444f0a52132f9fec9f71cf25b441cc6a4f355 linux/amd64 BuildDate=2025-02-26T15:41:25Z VendorInfo=gohugoio Always check you\u0026rsquo;re using the same (or newer) version to follow along smoothly.\nStep 2: Setting Up Your Hugo Project 📂 Once Hugo\u0026rsquo;s installed, let\u0026rsquo;s start creating our actual blog project. Here’s exactly how I did mine:\nhugo new site quickstart cd quickstart git init git submodule add https://github.com/guangmean/Niello.git themes/Niello echo \u0026#34;theme = \u0026#39;Niello\u0026#39;\u0026#34; \u0026gt;\u0026gt; hugo.toml hugo server Let\u0026rsquo;s quickly break down what\u0026rsquo;s happening here:\nNew Hugo site: quickstart is my chosen project name, feel free to pick whatever suits your project best. Git Initialization: I use Git for version control, helping me track changes easily and safely roll back if needed. Theme Setup: I went with the minimalist Niello theme—it\u0026rsquo;s sleek, clean, and keeps readers focused on content. Configuration: Adding the theme\u0026rsquo;s name to hugo.toml tells Hugo which theme to use. Local Preview: Running hugo server gives you instant live preview updates as you write, edit, and tweak your site—extremely helpful! configure the theme save the following to the hugo.toml file adjusting as needed.\nbaseURL = \u0026#34;https://www.angularcorp.com/\u0026#34; # Must end with splash defaultContentLanguage = \u0026#34;en\u0026#34; defaultContentLanguageInSubdir = true staticDir = [\u0026#34;themes/Niello/static\u0026#34;, \u0026#34;static\u0026#34;] theme = \u0026#34;Niello\u0026#34; [languages] [languages.en] title = \u0026#34;{CodeTrace} - Discover Issues, Share Solutions.\u0026#34; languageCode = \u0026#34;en-us\u0026#34; LanguageName = \u0026#34;🇺🇸EN\u0026#34; contentDir = \u0026#34;content/en\u0026#34; weight = 1 [[languages.en.menus.main]] name = \u0026#39;Home\u0026#39; pageRef = \u0026#39;/\u0026#39; weight = 1 [[languages.en.menus.main]] name = \u0026#39;Categories\u0026#39; pageRef = \u0026#39;/categories\u0026#39; weight = 2 [[languages.en.menus.main]] name = \u0026#39;Tags\u0026#39; pageRef = \u0026#39;/tags\u0026#39; weight = 3 [[languages.en.menus.main]] name = \u0026#39;Contact\u0026#39; pageRef = \u0026#39;/contact\u0026#39; weight = 4 [languages.zh] title = \u0026#34;{码途轨迹} - 发现问题，分享解决.\u0026#34; languageCode = \u0026#34;zh-cn\u0026#34; LanguageName = \u0026#34;🇨🇳CN\u0026#34; contentDir = \u0026#34;content/zh\u0026#34; weight = 2 [[languages.zh.menus.main]] name = \u0026#39;首页\u0026#39; pageRef = \u0026#39;/\u0026#39; weight = 1 [[languages.zh.menus.main]] name = \u0026#39;文章分类\u0026#39; pageRef = \u0026#39;/categories\u0026#39; weight = 2 [[languages.zh.menus.main]] name = \u0026#39;标签\u0026#39; pageRef = \u0026#39;/tags\u0026#39; weight = 3 [[languages.zh.menus.main]] name = \u0026#39;联系我们\u0026#39; pageRef = \u0026#39;/contact\u0026#39; weight = 4 [params] [params.google] google_ad_client = \u0026#34;ca-pub-******\u0026#34; //Optional, replace ca-pub-****** with your content ga4 = \u0026#34;G-******\u0026#34; //Optional, replace G-****** with your Google Analytics GA4 [params.bannershowcase] categories = [\u0026#34;AI\u0026#34;] limit = 2 [params.email] contact = \u0026#34;angularcorp@outlook.com\u0026#34; [params.ignore] categories = [\u0026#34;privacy\u0026#34;, \u0026#34;terms\u0026#34;, \u0026#34;archives\u0026#34;, \u0026#34;cookie\u0026#34;] [params.license] copyright = \u0026#34;\u0026amp;#xA9; 2019 ~ 2025 by guangmean. All Rights Reserved.\u0026#34; [params.share] sharethis = \u0026#34;******\u0026#34; // Optional, Add hou ShareThis appid here [params.disqus] shortname = \u0026#34;******\u0026#34;\t// Optional, Disqus Comment Short Name [outputs] home = [\u0026#34;HTML\u0026#34;, \u0026#34;JSON\u0026#34;] In order to change some translation key such as site title, slogan, etc you must create the following directory at the top level your project: i18n.\ncreate an appropiate language file (e.g en.toml for english) # File path: i18n/en.toml [sitename] other = \u0026#34;Site Name\u0026#34; [siteslogan] other = \u0026#34;Site Slogan\u0026#34; [siteseokeywords] other = \u0026#34;Site Home SEO Keywords\u0026#34; [siteseodescription] other = \u0026#34;Site Home SEO Description\u0026#34; Step 3: Creating Your First Post 📝 Now, the fun part—your first post! Hugo makes adding new content effortless. Just run:\nhugo new content posts/my-first-post.md This creates a fresh Markdown file (my-first-post.md). Markdown is super intuitive and easy-to-read. Just open the file, start writing, and save—Hugo handles everything else. Trust me; you\u0026rsquo;ll love how straightforward it feels.\nWhy the Niello Theme? 🎨✨ I specifically picked Niello because of its clean, minimalist design. The layout puts the spotlight firmly on your content without distractions. Plus, it\u0026rsquo;s fully responsive—your posts look fantastic on desktops, tablets, and mobile phones alike.\nAutomating the Deployment Process ⚙️🔄 This blog is deployed using the default github actions for hugo static sites. Under settings/pages enable github actions under the build and deploy section:\n# Sample workflow for building and deploying a Hugo site to GitHub Pages name: Deploy Hugo site to Pages on: # Runs on pushes targeting the default branch push: branches: [\u0026#34;main\u0026#34;] # Allows you to run this workflow manually from the Actions tab workflow_dispatch: # Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages permissions: contents: read pages: write id-token: write # Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued. # However, do NOT cancel in-progress runs as we want to allow these production deployments to complete. concurrency: group: \u0026#34;pages\u0026#34; cancel-in-progress: false # Default to bash defaults: run: shell: bash jobs: # Build job build: runs-on: ubuntu-latest env: HUGO_VERSION: 0.128.0 steps: - name: Install Hugo CLI run: | wget -O ${{ runner.temp }}/hugo.deb https://github.com/gohugoio/hugo/releases/download/v${HUGO_VERSION}/hugo_extended_${HUGO_VERSION}_linux-amd64.deb \\ \u0026amp;\u0026amp; sudo dpkg -i ${{ runner.temp }}/hugo.deb - name: Install Dart Sass run: sudo snap install dart-sass - name: Checkout uses: actions/checkout@v4 with: submodules: recursive - name: Setup Pages id: pages uses: actions/configure-pages@v5 - name: Install Node.js dependencies run: \u0026#34;[[ -f package-lock.json || -f npm-shrinkwrap.json ]] \u0026amp;\u0026amp; npm ci || true\u0026#34; - name: Build with Hugo env: HUGO_CACHEDIR: ${{ runner.temp }}/hugo_cache HUGO_ENVIRONMENT: production run: | hugo \\ --minify \\ --baseURL \u0026#34;${{ steps.pages.outputs.base_url }}/\u0026#34; - name: Upload artifact uses: actions/upload-pages-artifact@v3 with: path: ./public # Deployment job deploy: environment: name: github-pages url: ${{ steps.deployment.outputs.page_url }} runs-on: ubuntu-latest needs: build steps: - name: Deploy to GitHub Pages id: deployment uses: actions/deploy-pages@v4 Search To enable the search functionality, you need to configure JSON output in the hugo.toml file by adding the following:\n[outputs] home = [\u0026#34;HTML\u0026#34;, \u0026#34;JSON\u0026#34;] And a search folder with an _index.md file under the content directory is required, for example: content/en/search/_index.md\n+++ title = \u0026#34;Search Results\u0026#34; date = 2024-12-13T15:00:00+08:00 draft = false layout = \u0026#34;search\u0026#34; +++ With this setup, the search URL will be /en/search/?q=keywords\n","permalink":"http://localhost:1313/en/posts/blog-setup/","tags":["hugo","linux","ci/cd","programming","devops","pipeline","automation","blog","markdown"],"title":"Setting up this Blog! - Part 1"}]